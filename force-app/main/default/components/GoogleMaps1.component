<apex:component >
<html>
<head>
<title>Place Autocomplete</title>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no"/>
    <meta charset="utf-8"/>
<style>
  html, body {
    height: 100%;
    margin: 0;
    padding: 0;
  }
  #map {
     height: 100%;
        margin-left: 0rem;
        border: 2px solid white;
        margin-top: 1em;
     height: 400px;
        width: 100%;
  }
  .controls {
    margin-top: 10px;
    border: 1px solid transparent;
    border-radius: 2px 0 0 2px;
    box-sizing: border-box;
    -moz-box-sizing: border-box;
    height: 32px;
    outline: none;s
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
  }
  #pac-input {
    background-color: #fff;
    font-family: Roboto;
    font-size: 15px;
    font-weight: 300;
    margin-left: 12px;
    padding: 0 11px 0 13px;
    text-overflow: ellipsis;
    width: 300px;
    top: 54px !important;
    left: auto !important;
    z-index: 0;
    position: absolute;
    border: 1px solid #cccccc;
  }

  #pac-input:focus {
    border-color: #4d90fe;
  }

  .pac-container {
    font-family: Roboto;
  }

  #type-selector {
    color: #fff;
    background-color: #4d90fe;
    padding: 5px 11px 0px 11px;
    display:none;
  }

  #type-selector label {
    font-family: Roboto;
    font-size: 13px;
    font-weight: 300;
  }
     #lat {
        margin-left: 1em;
        margin-top: 2em;
        height: 25px;
        width: 150px;
        font-size: 13px;
        padding: 0;
        padding-left: 0.5em;
        border: 3px solid #cccccc;
        border-radius: 5px;

      }

      #long {
        margin-top: 2em;
        height: 25px;
        width: 150px;
        font-size: 13px;
        padding: 0;
        padding-left: 0.5em;
        border: 3px solid #cccccc;
        border-radius: 5px;
      }
</style>
</head>
<body>
    <input type="text" id="lat" style="display:none"/>
    <input type="text" id="long" style="display:none"/>
    <input id="pac-input" class="controls" type="text" placeholder="Enter a location" style="display:none;"/>
                        <div id="type-selector" class="controls">
                            <input type="radio" name="type" id="changetype-all" checked="checked"/>
                            <label for="changetype-all">All</label>
                            
                            <input type="radio" name="type" id="changetype-establishment"/>
                            <label for="changetype-establishment">Establishments</label>
                            
                            <input type="radio" name="type" id="changetype-address"/>
                            <label for="changetype-address">Addresses</label>
                            
                            <input type="radio" name="type" id="changetype-geocode"/>
                            <label for="changetype-geocode">Geocodes</label>
                        </div>
<div id="map"></div>

<script>
  // This example requires the Places library. Include the libraries=places
  // parameter when you first load the API. For example:                         // <script src="https://maps.googleapis.com/maps/api/js? key=YOUR_API_KEY&libraries=places">
  if (navigator.geolocation)
  {
      //alert('fond navigator');
    navigator.geolocation.getCurrentPosition(showCurrentLocation);
      
  }
  else
  {
    alert("Geolocation API not supported.");
  }
    var latitude;
    var longitude;
    var coords;
    var map;
    var markers = [];
    var currentlatlog;
    function showCurrentLocation(position)
    {
        //alert('Position');
        //debugger;
        try{
        latitude = position.coords.latitude;
        longitude = position.coords.longitude;
        currentlatlog = {lat: position.coords.latitude, lng: position.coords.longitude};
        //coords = new google.maps.LatLng(latitude, longitude);
        
        initMap();
            }catch(err){
                alert(err);
            }
    }

  function initMap() {
      //   debugger;
      //alert(currentlatlog);
      //currentlatlog = {lat: latitude, lng: longitude};
      map = new google.maps.Map(document.getElementById('map'), {
      center: {lat: latitude, lng: longitude},
      zoom: 12
    });
      addMarker(currentlatlog);
        // This event listener will call addMarker() when the map is clicked.
        map.addListener('click', function(event) {
          if (markers.length >= 1) {
              deleteMarkers();
          }

          addMarker(event.latLng);
          document.getElementById('lat').value = event.latLng.lat();
          document.getElementById('long').value =  event.latLng.lng();
        });
      document.getElementById('lat').value = latitude;
          document.getElementById('long').value =  longitude;
      /*var marker = new google.maps.Marker({
            position: {lat: latitude, lng: longitude},
            map: map,
            title: "Current location!"
            });*/
    var input = /** type HTMLInputElement */(
        document.getElementById('pac-input'));

    var types = document.getElementById('type-selector');
    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
    map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

    var autocomplete = new google.maps.places.Autocomplete(input);
    autocomplete.bindTo('bounds', map);
	
    var infowindow = new google.maps.InfoWindow();
    var marker = new google.maps.Marker({
      map: map,
      anchorPoint: new google.maps.Point(0, -29)
    });

    autocomplete.addListener('place_changed', function() {
      infowindow.close();
      marker.setVisible(false);
      var place = autocomplete.getPlace();
      if (!place.geometry) {
        window.alert("Autocomplete's returned place contains no geometry");
        return;
      }

      // If the place has a geometry, then present it on a map.
      if (place.geometry.viewport) {
        map.fitBounds(place.geometry.viewport);
      } else {
        map.setCenter(place.geometry.location);
        map.setZoom(17);  // Why 17? Because it looks good.
      }
        /* marker.setIcon(/** @type {google.maps.Icon} *//*({
        url: place.icon,
        size: new google.maps.Size(71, 71),
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 34),
        scaledSize: new google.maps.Size(35, 35)
      }));*/
      marker.setPosition(place.geometry.location);
      marker.setVisible(true);
        debugger;
        var example = place.geometry;
        console.log('location :'+place.geometry.location.lat());
        // alert(place.geometry.location);
      var address = '';
      if (place.address_components) {
        address = [
          (place.address_components[0] && place.address_components[0].short_name || ''),
          (place.address_components[1] && place.address_components[1].short_name || ''),
          (place.address_components[2] && place.address_components[2].short_name || '')
        ].join(' ');
      }

      infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
      infowindow.open(map, marker);
        if (markers.length >= 1) {
              deleteMarkers();
          }

        //addMarker(event.latLng);
          document.getElementById('lat').value = place.geometry.location.lat();
          document.getElementById('long').value =  place.geometry.location.lng();
        markers.push(marker);
    });

    // Sets a listener on a radio button to change the filter type on Places
    // Autocomplete.
    function setupClickListener(id, types) {
      var radioButton = document.getElementById(id);
      radioButton.addEventListener('click', function() {
        autocomplete.setTypes(types);
      });
        
    }

    setupClickListener('changetype-all', []);
    setupClickListener('changetype-address', ['address']);
    setupClickListener('changetype-establishment', ['establishment']);
    setupClickListener('changetype-geocode', ['geocode']);
      setTimeout(function(){ document.getElementById('pac-input').style="display:block;"; }, 2000);

      
  }
         // Adds a marker to the map and push to the array.
      function addMarker(location) {
          // alert();
        var marker = new google.maps.Marker({
          position: location,
          map: map
        });
        markers.push(marker);
      }

      // Sets the map on all markers in the array.
      function setMapOnAll(map) {
        for (var i = 0; i < markers.length; i++) {
          markers[i].setMap(map);
        }
      }

      // Removes the markers from the map, but keeps them in the array.
      function clearMarkers() {
        setMapOnAll(null);
      }

      // Deletes all markers in the array by removing references to them.
      function deleteMarkers() {
        clearMarkers();
        markers = [];
      }
</script>
    
<script src="https://maps.googleapis.com/maps/api/js?key={!$Label.Google_Map_API}&libraries=places"
    async="" defer=""></script>
   
   </body>
   </html>
</apex:component>