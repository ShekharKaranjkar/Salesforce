<apex:page >
    <html xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" lang="en">
        <META HTTP-EQUIV="Content-type" CONTENT="text/html; charset=UTF-8"/>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <script src="https://cdn.rawgit.com/mattdiamond/Recorderjs/08e7abd9/dist/recorder.js"></script>
        
        <apex:slds />
        <div class="slds-scope">
    <div class="slds-form-element slds-form-element_edit slds-form-element_readonly slds-form-element_stacked slds-hint-parent" id="Repair_Audio_Div">
                            <span class="slds-form-element__label">Record Audio</span>
                            <div class="slds-form-element__control">
                                <div class="slds-form-element__static">
                                    <svg aria-hidden="true" class="slds-icon slds-icon_small" id="recordButton" style="fill: black;">
                                        <use xmlns:xlink="http://www.w3.org/1999/xlink" 
                                             xlink:href="/apexpages/slds/latest/assets/icons/utility-sprite/svg/symbols.svg#unmuted">
                                        </use>
                                    </svg>
                                    <svg aria-hidden="true" class="slds-icon slds-icon_small" id="pauseButton" style="fill: black;display:none;">
                                        <use xmlns:xlink="http://www.w3.org/1999/xlink" 
                                             xlink:href="/apexpages/slds/latest/assets/icons/utility-sprite/svg/symbols.svg#pause">
                                        </use>
                                    </svg>
                                    <svg aria-hidden="true" class="slds-icon slds-icon_small" id="stopButton" style="fill: black;display:none;">
                                        <use xmlns:xlink="http://www.w3.org/1999/xlink" 
                                             xlink:href="/apexpages/slds/latest/assets/icons/utility-sprite/svg/symbols.svg#stop">
                                        </use>
                                    </svg><br/>
                                    <span id="audiostage"></span>
                                    <button class="slds-button slds-button_success" disabled="true" id="timierSetup" style="display:none;"><output name="xyx" id="outputtime">00:00</output></button>
                                    <span id="uploadid"><audio id="audiorecord"></audio></span>
                                </div>
                            </div>
                            
                        </div>
             </div>
            <script>
            function hasGetUserMedia() {
                return !!(navigator.mediaDevices &&
                          navigator.mediaDevices.getUserMedia);
            }
            
            if (hasGetUserMedia()) {
                //alert('Supported');
            } else {
                alert('UserMedia is not supported by your browser');
            }
    //webkitURL is deprecated but nevertheless
    URL = window.URL || window.webkitURL;
    
    var gumStream;                      //stream from getUserMedia()
    var rec;                            //Recorder.js object
    var input;                          //MediaStreamAudioSourceNode we'll be recording
    
    // shim for AudioContext when it's not avb. 
    var AudioContext = window.AudioContext || window.webkitAudioContext;
    var audioContext //audio context to help us record
    
    var recordButton = document.getElementById("recordButton");
    var stopButton = document.getElementById("stopButton");
    var pauseButton = document.getElementById("pauseButton");
    var timer;
    var z = 0;var m=0;
    //add events to those 2 buttons
    recordButton.addEventListener("click", startRecording);
    stopButton.addEventListener("click", stopRecording);
    pauseButton.addEventListener("click", pauseRecording);
    
        // var parentId = '{!$CurrentPage.parameters.id}';

    
    function startRecording() {
        // alert('navigator.permissions ' + navigator.appName);
        // alert('navigator.permission ' + navigator.permission);
        /*navigator.permissions.query({name:'microphone'}).then(function(result) {
            if (result.state == 'granted') {
                alert('result.state '+ result.state);
            } else if (result.state == 'prompt') {
                alert('result.state '+ result.state);
            } else if (result.state == 'denied') {
                alert('result.state '+ result.state);
            }
            result.onchange = function() {
                alert('onchange');
            };
            });*/
    
        //alert();
        console.log("recordButton clicked");
        document.getElementById('uploadid').innerHTML="";
        $('[id$=stopButton]').show();
        $('[id$=pauseButton]').show();
        $('[id$=recordButton]').hide();
        
        /*
            Simple constraints object, for more advanced audio features see
            https://addpipe.com/blog/audio-constraints-getusermedia/
        */
        
        var constraints = { audio: true, video:false };
        
        /*
            Disable the record button until we get a success or fail from getUserMedia() 
        
        
        recordButton.disabled = true;
        stopButton.disabled = false;
        pauseButton.disabled = false;
        
        /*
            Were using the standard promise based getUserMedia() 
            https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia
        */
        //alert('non=');
        navigator.getUserMedia = navigator.getUserMedia ||
                         navigator.webkitGetUserMedia ||
                         navigator.mozGetUserMedia;
        //if (navigator.getUserMedia){
        //alert(navigator.mediaDevices.getUserMedia);
        if(this.lastStream) {
            this.lastStream.getTracks().forEach(track => track.stop()) 
            //alert('last stream');
        }
        /*window.navigator.permissions.query({name:'microphone'}).then(function(result) {
            alert('nav');
            if (result.state == 'granted') {
                alert('granted');
            } else if (result.state == 'prompt') {
                alert('prompt');
            } else if (result.state == 'denied') {
                alert('denied');
            }
            result.onchange = function() {
                
            };
        }).catch(function(err) {
           
            console.log('err ',err);
            alert('error : '+err);
        });*/
        //alert(window.navigator.mediaDevices);
        window.navigator.mediaDevices.getUserMedia(constraints).then(function(stream) {
            // alert('enter');
            console.log("getUserMedia() success, stream created, initializing Recorder.js ...");
        
            /*
                create an audio context after getUserMedia is called
                sampleRate might change after getUserMedia is called, like it does on macOS when recording through AirPods
                the sampleRate defaults to the one set in your OS for your playback device
        
            */
            audioContext = new AudioContext();
            console.log('audioContext ',audioContext);
            //update the format 
            //document.getElementById("formats").innerHTML="Format: 1 channel pcm @ "+audioContext.sampleRate/1000+"kHz";
        
            /*  assign to gumStream for later use  */
            console.log('stream ', stream);
            
            gumStream = stream;
            console.log('gumStream ', gumStream);
            
            /* use the stream */
            input = audioContext.createMediaStreamSource(stream);
            console.log('input ', input);
            /* 
                Create the Recorder object and configure to record mono sound (1 channel)
                Recording 2 channels  will double the file size
            */
            rec = new Recorder(input,{numChannels:1});
            console.log('start ',rec);
            //start the recording process
            timerstartFunction();
            $('[id$=timierSetup]').show();
            rec.record();
        
            console.log("Recording started");
            
            //alert('timierSetup');
        
        }).catch(function(err) {
            //enable the record button if getUserMedia() fails
            /*recordButton.disabled = false;
            stopButton.disabled = true;
            pauseButton.disabled = true;*/
            console.log('err ',err);
            //alert('error : '+err);
        });
        navigator.mediaDevices.enumerateDevices().then((devices) => {
            devices = devices.filter((d) => d.kind === 'audioinput');
            //alert('device :'+devices);
        });
            // }
    }
    
    function pauseRecording(){
        console.log("pauseButton clicked rec.recording=",rec.recording );
        if (rec.recording){
            //pause
            rec.stop();
            document.getElementById("audiostage").innerHTML="Resume";
            clearInterval(timer);
        }else{
            //resume
            rec.record();
            document.getElementById("audiostage").innerHTML="Pause";
            timerstartFunction();
        }
    }
    
    function stopRecording() {
        clearInterval(timer);
        z = 0;m=0;
        console.log("stopButton clicked");
        document.getElementById("audiostage").innerHTML="";
        document.getElementById('uploadid').innerHTML="";
        $('[id$=stopButton]').hide();
        $('[id$=pauseButton]').hide();
        $('[id$=recordButton]').show();
        //disable the stop button, enable the record too allow for new recordings
        /*stopButton.disabled = true;
        recordButton.disabled = false;
        pauseButton.disabled = true;
        
        //reset button just in case the recording is stopped while paused
        pauseButton.innerHTML="Pause";*/
        
        //tell the recorder to stop the recording
        console.log('rec ' ,rec);
        rec.stop();
        
        //stop microphone access
        gumStream.getAudioTracks()[0].stop();
        
        //create the wav blob and pass it on to createDownloadLink
        rec.exportWAV(createDownloadLink);
    }
        
    function createDownloadLink(blob) {
        
        var url = URL.createObjectURL(blob);
        var au = document.createElement('audio');
        var li = document.getElementById('uploadid');
        
        //name of .wav file to use during upload and download (without extendion)
        var filename = new Date().toISOString();
        
        //add controls to the <audio> element
        au.controls = true;
        au.src = url;
        au.id = 'audioclip';
        //add the new audio element to li
        li.appendChild(au);
        
        //add the filename to the li
        // li.appendChild(document.createTextNode(filename+".mp3"));
        
        //add the save to disk link to li
        //li.appendChild(link);
        
        //upload link
        $('[id$=timierSetup]').hide(); 
        var upload = document.createElement('a');
        upload.href="#";
        upload.id="uploadOption";
        upload.innerHTML = "Upload";
        upload.addEventListener("click", function(event){
            //fd.append("audio_data",blob, filename);
            const reader = new FileReader();
            reader.onload = function () {
              var b64 = reader.result.replace(/^data:.+;base64,/, '');
              console.log(b64);
              //var html = atob(b64);
              
            };
            
            reader.readAsDataURL(blob);
        });
        li.appendChild(document.createTextNode (" "));//add a space in between
        li.appendChild(upload);//add the upload link to li
        
        //add the li element to the ol
        //recordingsList.appendChild(li);
    }
    
    function loadAudio(audioFile){
        
        var url = URL.createObjectURL(audioFile.versionData);
        var au = document.getElementById('audiorecord');
        var li = document.getElementById('uploadid');
        
        var btn = document.createElement('button');
        console.log('btn ' ,audioFile);
        btn.id = audioFile.ContentDocumentId ;
        btn.innerText = 'Delete';
        btn.addEventListener("click", deleteAudio);
        //btn.onclick ="deleteAudio(" + audioFile.ContentDocumentId + ")";
        
         //name of .wav file to use during upload and download (without extendion)
        var filename = audioFile.fileName;
        
        //add controls to the <audio> element
        au.controls = true;
        au.src = url;
        
        //add the new audio element to li
        //li.appendChild(au);
        console.log('After Upload');
        //add the filename to the li
        li.appendChild(document.createTextNode(filename));
        li.appendChild(document.createTextNode (" "));
        //add button 
        li.appendChild(btn);
        
        //add the li element to the ol
        //recordingsList.appendChild(li);
        
        
        
    }
    function deleteAudio(btnElement){
        //console.log('del Id ',btnElement.toElement.id);
        //if(btnElement.toElement.id){
            // delcontentfiles(btnElement);
        //return false;
        //}
    }
       function timerstartFunction() {
            //alert('timerstartFunction');
           // Update the count down every 1 second
           
           timer = setInterval(function() {
               if(z > 59){
                   z = 0;
                   m +=1;
               }
               var right;
               if(m == 0)
                   right = '00:';
               else
                   right = '0'+m+':';
               if(z > 9)
                   document.getElementById("outputtime").value = right+z;
               else
                   document.getElementById("outputtime").value = right+'0'+z;
               z += 1;
           }, 1000);
       }
       var verid ;
       function filessubmissionatproperty(result){
           verid =result; 
             var upload = document.createElement('a');
        upload.href="#";
        upload.id="deleteOption";
        upload.innerHTML = "Delete";
        upload.addEventListener("click", function(event){
            
        deleteAudio(verid);
        });
                                $('[id$=uploadOption]').hide();
             document.getElementById('uploadid').appendChild(upload);                   
       }
       function allclear(){
       document.getElementById('uploadid').innerHTML="";
       }
    </script>
    </html>           
</apex:page>